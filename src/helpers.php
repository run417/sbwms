<?php
/**
 * Get the project path.
 * 
 * The project directory must be name 'sbwms'
 * NOTE: The full path must contain forward slashes /
 */
function getProjectPath() : string {
    $currentPath = __DIR__;
    $directoryArray = explode(DIRECTORY_SEPARATOR, $currentPath);
    $position = array_search("sbwms", $directoryArray);
    if (!$position) exit("Please rename project folder to sbwms");
    $newarray = array_slice($directoryArray, 0, $position + 1);
    $projectPath = implode("/", $newarray);
    return $projectPath;
}
/**
 * Generate breadcrumb html markup
 * 
 * @param array $breadcrumbArray 
 * Expects an associative array that contains breadcrumb item name
 * as key and its url as value. The url should be relative. The 
 * absolute path will be generated by this function. The elements
 * in the array should be in the order of user progression of 
 * the menus.
 * 
 * @param string $activeItem
 * The currently active breadcrumb item. Used to provide additional
 * markup. The $activeItem should be equal to some item key in the
 * $breadcrumbArray
 */
function breadcrumbs(array $breadcrumbArray=[], string $activeItem='') {
    $breadcrumbs = $breadcrumbArray;
    $active = $activeItem;
    $separator = '&raquo;';
    $breadcrumbString = '';
    $c = count($breadcrumbs);
    foreach ($breadcrumbs as $item => $url) {
        $absPath = url_for($url);
        $activeClass = '';
        if (strtolower($active) === strtolower($item)) {
            $absPath = '#';
            $activeClass = 'style="text-decoration: underline;"';
        }
        $breadcrumbString .= "<a href=\"{$absPath}\" {$activeClass}>{$item}</a>";
        $breadcrumbString .= ($c > 1) ? ' ' . $separator . ' ' : '';
        $c -= 1;
    }
    return $breadcrumbString;
}

function url_for($script_path)
{
    // adds the leading '/' if not present
    // (var_dump($script_path));
    if ($script_path === '#') {
        return '#';
    }
    if ($script_path == '' || $script_path[0] != '/')
    {
        $script_path = "/" . $script_path;
    }
    return WWW_ROOT . $script_path;
}

/**
 * Remove trailing slashes and trailing word 'index' from a string
 * 
 *  * '/index' returns '/'
 *  * '/customer/ returns '/customer'
 *  * '/customer/index/ returns /customer
 * 
 * @return string path
 */
function formatPath(string $path) :string {
    /* TODO Limit the lenght */

    // if path length is 1 then most likely path === '/' only
    // and contains a trailing slash
    if (strlen($path) > 1 && substr($path, -1) === '/') {
       $path = substr($path, 0, -1); // remove trailing slash
    }

    // check and remove words index from path
    if (substr($path, -5) === 'index') {
        $path = substr($path, 0, -5);
    }

    // if last 5 characters === 'index' OR has a trailing slash AND is greater than a single character run this function again.
    if ((substr($path, -5) === 'index' || substr($path, -1) === '/') && strlen($path) > 1) {
        return formatPath($path);
    }

    return $path;
}
?>